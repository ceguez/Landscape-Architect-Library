{"version":3,"sources":["actions/types.js","http-common.js","services/plant.service.js","components/add-plant.component.js","actions/plants.js","components/plant.component.js","components/plants-list.component.js","App.js","reducers/plants.js","reducers/index.js","store.js","index.js"],"names":["CREATE_PLANT","RETRIEVE_PLANTS","UPDATE_PLANT","DELETE_PLANT","DELETE_ALL_PLANTS","axios","create","baseURL","headers","http","get","climate","data","post","id","put","delete","title","AddPlant","props","onChangeTitle","bind","onChangeClimate","onChangeDescription","savePlant","newPlant","state","description","published","submitted","e","this","setState","target","value","createPlant","then","console","log","catch","className","onClick","htmlFor","type","required","onChange","name","Component","connect","dispatch","a","PlantDataService","res","payload","Promise","resolve","reject","Plant","getPlant","updateStatus","updateContent","removePlant","currentPlant","message","match","params","prevState","response","status","updatePlant","reponse","deletePlant","history","push","update","PlantsList","onChangeSearchTitle","refreshData","setActivePlant","findByTitle","removeAllPlants","currentIndex","searchClimate","retrievePlants","searchTitle","plant","index","deleteAllPlants","findPlantsByTitle","plants","placeholder","map","to","getAll","deleteAll","App","exact","path","component","initialState","plantReducer","action","filter","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56bef2a6.chunk.js","sourcesContent":["export const CREATE_PLANT = \"CREATE_PLANT\";\r\nexport const RETRIEVE_PLANTS = \"RETRIEVE_PLANTS\";\r\nexport const UPDATE_PLANT = \"UPDATE_PLANT\";\r\nexport const DELETE_PLANT = \"DELETE_PLANT\";\r\nexport const DELETE_ALL_PLANTS = \"DELETE_ALL_PLANTS\";","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:8080/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});","import http from \"../http-common\";\r\n\r\nclass PlantDataService {\r\n  getAll() {\r\n    return http.get(\"/plants\");\r\n  }\r\n  get(climate) {\r\n    return http.get(`/plants/${climate}`);\r\n  }\r\n  create(data) {\r\n    return http.post(\"/plants\", data);\r\n  }\r\n\r\n  update(id, data) {\r\n    return http.put(`/plants/${id}`, data);\r\n  }\r\n\r\n  delete(id) {\r\n    return http.delete(`/plants/${id}`);\r\n  }\r\n\r\n  deleteAll() {\r\n    return http.delete(`/plants`);\r\n  }\r\n\r\n  findByTitle(title) {\r\n    return http.get(`/plants?title=${title}`);\r\n  }\r\n}\r\n\r\nexport default new PlantDataService();","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createPlant } from \"../actions/plants\";\r\n\r\nclass AddPlant extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    this.onChangeClimate = this.onChangeClimate.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.savePlant = this.savePlant.bind(this);\r\n    this.newPlant = this.newPlant.bind(this);\r\n\r\n    this.state = {\r\n      id: null,\r\n      title: \"\",\r\n      climate: \"\",\r\n      description: \"\",\r\n      published: false,\r\n      submitted: false,\r\n    };\r\n  }\r\n\r\n  onChangeTitle(e) {\r\n    this.setState({\r\n      title: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangeClimate(e) {\r\n    this.setState({\r\n      climate: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangeDescription(e) {\r\n    this.setState({\r\n      description: e.target.value,\r\n    });\r\n  }\r\n\r\n  savePlant() {\r\n    const { title, climate, description } = this.state;\r\n\r\n    this.props\r\n      .createPlant(title, climate, description)\r\n      .then((data) => {\r\n        this.setState({\r\n          id: data.id,\r\n          title: data.title,\r\n          climate: data.climate,\r\n          description: data.description,\r\n          published: data.published,\r\n\r\n          submitted: true,\r\n        });\r\n        console.log(data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  newPlant() {\r\n    this.setState({\r\n      id: null,\r\n      title: \"\",\r\n      climate: \"\",\r\n      description: \"\",\r\n      published: false,\r\n\r\n      submitted: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"submit-form\">\r\n        {this.state.submitted ? (\r\n          <div>\r\n            <h4>You submitted successfully!</h4>\r\n            <button className=\"btn btn-success\" onClick={this.newPlant}>\r\n              Add\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"title\">Common Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"title\"\r\n                required\r\n                value={this.state.title}\r\n                onChange={this.onChangeTitle}\r\n                name=\"title\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"climate\">Climate Type</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"climate\"\r\n                required\r\n                value={this.state.climate}\r\n                onChange={this.onChangeClimate}\r\n                name=\"climate\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"description\">Description</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"description\"\r\n                required\r\n                value={this.state.description}\r\n                onChange={this.onChangeDescription}\r\n                name=\"description\"\r\n              />\r\n            </div>\r\n\r\n            <button onClick={this.savePlant} className=\"btn btn-success\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default connect(null, { createPlant })(AddPlant);","import {\r\n    CREATE_PLANT,\r\n    RETRIEVE_PLANTS,\r\n    UPDATE_PLANT,\r\n    DELETE_PLANT,\r\n    DELETE_ALL_PLANTS\r\n  } from \"./types\";\r\n  \r\n  import PlantDataService from \"../services/plant.service\";\r\n  \r\n  export const createPlant = (title, climate, description) => async (dispatch) => {\r\n    try {\r\n      const res = await PlantDataService.create({ title, climate, description });\r\n  \r\n      dispatch({\r\n        type: CREATE_PLANT,\r\n        payload: res.data,\r\n      });\r\n  \r\n      return Promise.resolve(res.data);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  };\r\n  \r\n  export const retrievePlants = () => async (dispatch) => {\r\n    try {\r\n      const res = await PlantDataService.getAll();\r\n  \r\n      dispatch({\r\n        type: RETRIEVE_PLANTS,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  \r\n  export const updatePlant = (id, data) => async (dispatch) => {\r\n    try {\r\n      const res = await PlantDataService.update(id, data);\r\n  \r\n      dispatch({\r\n        type: UPDATE_PLANT,\r\n        payload: data,\r\n      });\r\n  \r\n      return Promise.resolve(res.data);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  };\r\n  \r\n  export const deletePlant = (id) => async (dispatch) => {\r\n    try {\r\n      await PlantDataService.delete(id);\r\n  \r\n      dispatch({\r\n        type: DELETE_PLANT,\r\n        payload: { id },\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  \r\n  export const deleteAllPlants = () => async (dispatch) => {\r\n    try {\r\n      const res = await PlantDataService.deleteAll();\r\n  \r\n      dispatch({\r\n        type: DELETE_ALL_PLANTS,\r\n        payload: res.data,\r\n      });\r\n  \r\n      return Promise.resolve(res.data);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  };\r\n  \r\n  export const findPlantsByTitle = (title) => async (dispatch) => {\r\n    try {\r\n      const res = await PlantDataService.findByTitle(title);\r\n  \r\n      dispatch({\r\n        type: RETRIEVE_PLANTS,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { updatePlant, deletePlant } from \"../actions/plants\";\r\nimport PlantDataService from \"../services/plant.service\";\r\n\r\nclass Plant extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    this.onChangeClimate = this.onChangeClimate.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.getPlant = this.getPlant.bind(this);\r\n    this.updateStatus = this.updateStatus.bind(this);\r\n    this.updateContent = this.updateContent.bind(this);\r\n    this.removePlant = this.removePlant.bind(this);\r\n\r\n    this.state = {\r\n      currentPlant: {\r\n        id: null,\r\n        title: \"\",\r\n        climate: \"\",\r\n        description: \"\",\r\n        published: false,\r\n      },\r\n      message: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getPlant(this.props.match.params.id);\r\n  }\r\n\r\n  onChangeTitle(e) {\r\n    const title = e.target.value;\r\n\r\n    this.setState(function (prevState) {\r\n      return {\r\n        currentPlant: {\r\n          ...prevState.currentPlant,\r\n          title: title,\r\n        },\r\n      };\r\n    });\r\n  }\r\n\r\n  onChangeClimate(e) {\r\n    const climate = e.target.value;\r\n\r\n    this.setState((prevState) => ({\r\n      currentPlant: {\r\n        ...prevState.currentPlant,\r\n        climate: climate,\r\n      },\r\n    }));\r\n  }\r\n\r\n  onChangeDescription(e) {\r\n    const description = e.target.value;\r\n\r\n    this.setState((prevState) => ({\r\n      currentPlant: {\r\n        ...prevState.currentPlant,\r\n        description: description,\r\n      },\r\n    }));\r\n  }\r\n\r\n  getPlant(id) {\r\n    PlantDataService.get(id)\r\n      .then((response) => {\r\n        this.setState({\r\n          currentPlant: response.data,\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updateStatus(status) {\r\n    var data = {\r\n      id: this.state.currentPlant.id,\r\n      title: this.state.currentPlant.title,\r\n      climate: this.state.currentPlant.climate,\r\n      description: this.state.currentPlant.description,\r\n      published: status,\r\n    };\r\n\r\n    this.props\r\n      .updatePlant(this.state.currentPlant.id, data)\r\n      .then((reponse) => {\r\n        console.log(reponse);\r\n\r\n        this.setState((prevState) => ({\r\n          currentPlant: {\r\n            ...prevState.currentPlant,\r\n            published: status,\r\n          },\r\n        }));\r\n\r\n        this.setState({ message: \"The status was updated successfully!\" });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updateContent() {\r\n    this.props\r\n      .updatePlant(this.state.currentPlant.id, this.state.currentPlant)\r\n      .then((reponse) => {\r\n        console.log(reponse);\r\n        \r\n        this.setState({ message: \"The Plant was updated successfully!\" });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  removePlant() {\r\n    this.props\r\n      .deletePlant(this.state.currentPlant.id)\r\n      .then(() => {\r\n        this.props.history.push(\"/plants\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { currentPlant } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {currentPlant ? (\r\n          <div className=\"edit-form\">\r\n            <h4>Plant</h4>\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"title\">Common Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"title\"\r\n                  value={currentPlant.title}\r\n                  onChange={this.onChangeTitle}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"climate\">Climate</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"climate\"\r\n                  value={currentPlant.climate}\r\n                  onChange={this.onChangeClimate}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"description\"\r\n                  value={currentPlant.description}\r\n                  onChange={this.onChangeDescription}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>\r\n                {currentPlant.published ? \"Published\" : \"Pending\"}\r\n              </div>\r\n            </form>\r\n\r\n            {currentPlant.published ? (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => this.updateStatus(false)}\r\n              >\r\n                UnPublish\r\n              </button>\r\n            ) : (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => this.updateStatus(true)}\r\n              >\r\n                Publish\r\n              </button>\r\n            )}\r\n\r\n            <button\r\n              className=\"badge badge-danger mr-2\"\r\n              onClick={this.removePlant}\r\n            >\r\n              Delete\r\n            </button>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"badge badge-success\"\r\n              onClick={this.updateContent}\r\n            >\r\n              Update\r\n            </button>\r\n            <p>{this.state.message}</p>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <br />\r\n            <p>Please click on a Plant...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default connect(null, { updatePlant, deletePlant })(Plant);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { retrievePlants, findPlantsByTitle, deleteAllPlants } from \"../actions/plants\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass PlantsList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeSearchTitle  = this.onChangeSearchTitle .bind(this);\r\n    this.refreshData = this.refreshData.bind(this);\r\n    this.setActivePlant = this.setActivePlant.bind(this);\r\n    this.findByTitle= this.findByTitle.bind(this);\r\n    this.removeAllPlants = this.removeAllPlants.bind(this);\r\n\r\n    this.state = {\r\n      currentPlant: null,\r\n      currentIndex: -1,\r\n      searchClimate: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.retrievePlants();\r\n  }\r\n\r\n  onChangeSearchTitle (e) {\r\n    const searchTitle  = e.target.value;\r\n\r\n    this.setState({\r\n      searchTitle : searchTitle,\r\n    });\r\n  }\r\n\r\n  refreshData() {\r\n    this.setState({\r\n      currentPlant: null,\r\n      currentIndex: -1,\r\n    });\r\n  }\r\n\r\n  setActivePlant(plant, index) {\r\n    this.setState({\r\n      currentPlant: plant,\r\n      currentIndex: index,\r\n    });\r\n  }\r\n\r\n  removeAllPlants() {\r\n    this.props\r\n      .deleteAllPlants()\r\n      .then((response) => {\r\n        console.log(response);\r\n        this.refreshData();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  findByTitle() {\r\n    this.refreshData();\r\n\r\n    this.props.findPlantsByTitle(this.state.searchTitle);\r\n  }\r\n\r\n  render() {\r\n    const { searchTitle , currentPlant, currentIndex } = this.state;\r\n    const { plants } = this.props;\r\n\r\n    return (\r\n      <div className=\"list row\">\r\n        <div className=\"col-md-8\">\r\n          <div className=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Search by Title\"\r\n              value={searchTitle }\r\n              onChange={this.onChangeSearchTitle}\r\n            />\r\n            <div className=\"input-group-append\">\r\n              <button\r\n                className=\"btn btn-outline-secondary\"\r\n                type=\"button\"\r\n                onClick={this.findByTitle}\r\n              >\r\n                Search\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <h4>List of Plants</h4>\r\n\r\n          <ul className=\"list-group\">\r\n            {plants &&\r\n              plants.map((plant, index) => (\r\n                <li\r\n                  className={\r\n                    \"list-group-item \" +\r\n                    (index === currentIndex ? \"active\" : \"\")\r\n                  }\r\n                  onClick={() => this.setActivePlant(plant, index)}\r\n                  key={index}\r\n                >\r\n                  {plant.title}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n\r\n          <button\r\n            className=\"m-3 btn btn-sm btn-danger\"\r\n            onClick={this.removeAllPlants}\r\n          >\r\n            Remove All\r\n          </button>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          {currentPlant ? (\r\n            <div>\r\n              <h4>Plant</h4>\r\n              <div>\r\n                <label>\r\n                  <strong>Common Name:</strong>\r\n                </label>{\" \"}\r\n                {currentPlant.title}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Climate:</strong>\r\n                </label>{\" \"}\r\n                {currentPlant.climate}\r\n              </div>\r\n\r\n              <div>\r\n                <label>\r\n                  <strong>Description:</strong>\r\n                </label>{\" \"}\r\n                {currentPlant.description}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>{\" \"}\r\n                {currentPlant.published ? \"Published\" : \"Pending\"}\r\n              </div>\r\n\r\n              <Link\r\n                to={\"/plants/\" + currentPlant.id}\r\n                className=\"badge badge-warning\"\r\n              >\r\n                Edit\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <br />\r\n              <p>Please click on a Plant...</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    plants: state.plants,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { retrievePlants, findPlantsByTitle, deleteAllPlants })(PlantsList);","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddPlant from \"./components/add-plant.component\";\nimport Plant from \"./components/plant.component\";\nimport PlantsList from \"./components/plants-list.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <Link to={\"/plants\"} className=\"navbar-brand\">\n            Landscape Architect's Library\n          </Link>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/plants\"} className=\"nav-link\">\n                List of Plants\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Add\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/plants\"]} component={PlantsList} />\n            <Route exact path=\"/add\" component={AddPlant} />\n            <Route path=\"/plants/:id\" component={Plant} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","import {\r\n    CREATE_PLANT,\r\n    RETRIEVE_PLANTS,\r\n    UPDATE_PLANT,\r\n    DELETE_PLANT,\r\n    DELETE_ALL_PLANTS,\r\n  } from \"../actions/types\";\r\n  \r\n  const initialState = [];\r\n  \r\n  function plantReducer(plants = initialState, action) {\r\n    const { type, payload } = action;\r\n  \r\n    switch (type) {\r\n      case CREATE_PLANT:\r\n        return [...plants, payload];\r\n  \r\n      case RETRIEVE_PLANTS:\r\n        return payload;\r\n  \r\n      case UPDATE_PLANT:\r\n        return plants.map((plant) => {\r\n          if (plant.id === payload.id) {\r\n            return {\r\n              ...plant,\r\n              ...payload,\r\n            };\r\n          } else {\r\n            return plant;\r\n          }\r\n        });\r\n  \r\n      case DELETE_PLANT:\r\n        return plants.filter(({ id }) => id !== payload.id);\r\n  \r\n      case DELETE_ALL_PLANTS:\r\n        return [];\r\n  \r\n      default:\r\n        return plants;\r\n    }\r\n  };\r\n  \r\n  export default plantReducer;","import { combineReducers } from \"redux\";\r\nimport plants from \"./plants\";\r\n\r\nexport default combineReducers({\r\n    plants,\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}